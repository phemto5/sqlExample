{"version":3,"sources":["webpack:///webpack/bootstrap e4a5604dc0fe7d759844","webpack:///./src/index.tsx","webpack:///external \"promise\"","webpack:///external \"fs\"","webpack:///./src/Entry.tsx","webpack:///./src/LogData.tsx","webpack:///external \"mssql\""],"names":[],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e4a5604dc0fe7d759844","import mssql = require('mssql');\r\nimport Promise = require('promise');\r\nimport fs = require('fs');\r\nimport { Entry, LoginLine, TimestampLine, LineParams } from './Entry';\r\nimport { LogData } from './LogData';\r\n\r\nlet sql: any = require('mssql');\r\nlet filePath: string = `\\\\\\\\wsepdm\\\\c$\\\\Program Files (x86)\\\\SolidWorks Corp\\\\SolidNetWork License Manager\\\\lmgrd.log`;\r\nlet startLineNumber: number = 0;\r\nlet processing: boolean = false\r\nlet dString: string = null;\r\nlet seconds: number = 30;\r\nsetInterval(() => {\r\n    let logData: LogData = new LogData(filePath, null, startLineNumber, dString);\r\n    console.log(`Still processing:`);\r\n    // console.log(`Processes Running ${processes.length}`)\r\n    if (!processing) {\r\n        // console.info('Filling Data from licence file');\r\n        console.log(`${processing} ...\\n\\tStarting next process`);\r\n        startProcessing(logData)\r\n            .then((ld: LogData) => {\r\n                dString = ld.getDateString();\r\n                startLineNumber = ld.getLine();\r\n                // console.log(ld);\r\n                logData = ld;\r\n            })\r\n            .catch(catcher);\r\n    } else {\r\n        console.log(`${processing} ...\\n\\tDelaying next process for ${seconds} seconds`);\r\n    }\r\n}, 1000 * seconds);\r\nconsole.log(`Started Server ${new Date()}`);\r\n\r\nfunction startProcessing(logData: LogData): Promise.IThenable<LogData> {\r\n    console.log(`Start Processing`)\r\n    processing = true;\r\n    return checkFileExists(logData)\r\n        .then(processLogFile)\r\n        .then(processLogLines)\r\n        .then((res: LogData) => {\r\n            processing = false;\r\n            console.log(`Processes are cleared ${new Date().toLocaleString()}`);\r\n            console.log(`Last Date ${res.getDateString()}`);\r\n            return Promise.resolve(res);\r\n        })\r\n}\r\n\r\nfunction processLogFile(logData: LogData): Promise.IThenable<LogData> {\r\n    console.log(`Processing Log File`);\r\n    return new Promise<LogData>((resolve, reject) => {\r\n        fs.readFile(logData.getPath(), 'utf8', (err: NodeJS.ErrnoException, data: string): void => {\r\n            if (err) {\r\n                reject(err)\r\n            }\r\n            // console.log(`Loading new File Data`)\r\n            logData.setLogData(data.trim().split('\\r\\n'));\r\n            console.log(`Found ${logData.getLineCount()} lines`)\r\n            resolve(logData);\r\n        });\r\n    })\r\n}\r\nfunction processLogLines(logData: LogData): Promise.IThenable<LogData> {\r\n    console.log(`Processing Line ${logData.getLine()}`);\r\n    let nextStep: Promise.IThenable<LogData>;\r\n    if (!logData.isLastLine()) {\r\n        logData.setLineData();\r\n        switch (logData.getLineType()) {\r\n            case 'IN:': {\r\n                logData.setLineEntry(new LoginLine(logData.getLineParams()));\r\n                nextStep = addRow(logData, 1);\r\n                break;\r\n            }\r\n            case 'TIMESTAMP': {\r\n                logData.setLineEntry(new TimestampLine(logData.getLineParams()));\r\n                // console.log(`Found Timestamp ${(logData.getLineEntry() as TimestampLine).dateString}`);\r\n                console.log(`Setting Date to: ${(logData.getLineEntry() as TimestampLine).dateString}`)\r\n                logData.setDateString((logData.getLineEntry() as TimestampLine).dateString);\r\n                nextStep = nextRow(logData);\r\n                break;\r\n            }\r\n            case 'OUT:': {\r\n                logData.setLineEntry(new LoginLine(logData.getLineParams()));\r\n                nextStep = addRow(logData, -1);\r\n                break;\r\n            }\r\n            default: {\r\n                // console.log(`No line Recorded`);\r\n                nextStep = nextRow(logData)\r\n                break;\r\n            }\r\n        }\r\n        // console.log(`Found ${logData.getLineType()} on line ${logData.getLine()} `)\r\n    } else {\r\n        logData.setLine(logData.getLogLength());\r\n        nextStep = Promise.resolve(logData);\r\n    }\r\n    return nextStep\r\n}\r\nfunction nextRow(logData: LogData): Promise.IThenable<LogData> {\r\n    logData.incramentLine();\r\n    return processLogLines(logData);\r\n}\r\n\r\nfunction addRow(logData: LogData, maxModifyer: number): Promise.IThenable<LogData> {\r\n    console.log(`Adding Row`);\r\n    let dateString: string = logData.getDateString();\r\n    let row: LoginLine = logData.getLineEntry() as LoginLine;\r\n    let rowResponse: Promise.IThenable<any>\r\n    let config: mssql.config = {\r\n        user: 'readwrite',\r\n        password: 'readwrite',\r\n        server: 'sqldb1.wagstaff.com\\\\WAGENG',\r\n        database: 'WagEngineering'\r\n    }\r\n    if (dateString) {\r\n        console.log(`Found Date String`)\r\n        rowResponse = sql.connect(config)\r\n            .then(() => {\r\n                let dailyMaxRow: string =\r\n                    `select top 1 DailyMax from SolidworksLicUse where CAST(DateTime as DATE) = CAST ('${dateString}' as DATE) and Entrypoint = '${row.entryPoint}' order by LineNumber DESC`\r\n                console.log(`Getting Daily Max`);\r\n                return new sql.Request().query(dailyMaxRow);\r\n            }).catch(catcher)\r\n            .then((recordset: mssql.recordSet) => {\r\n                let max: number;\r\n                if (recordset && recordset.length == 0) {\r\n                    // console.log(`DailyMax : 0 `)\r\n                    max = setMax(0);\r\n                } else {\r\n                    // console.log(`DailyMax : ${recordset[0].DailyMax} `)\r\n                    max = setMax(parseInt(recordset[0].DailyMax));\r\n                }\r\n                row.dailyMax = max;\r\n                // console.log(`${row.dailyMax} for ${dateString} with ${row.action} at line ${row.lineNumber}`);\r\n                let existingRow: string =\r\n                    `select * from SolidworksLicUse where DateTime = '${row.dateTime.toISOString()}' and EntryPoint = '${row.entryPoint}' and LineNumber = ${row.lineNumber}`;\r\n                console.log(`Getting existing Row`);\r\n                return new sql.Request().query(existingRow)\r\n            }).catch(catcher)\r\n            .then((recordset: mssql.recordSet) => {\r\n                let response: Promise.IThenable<any>\r\n                if (recordset.length == 0) {\r\n                    // console.log(`Row Insert`);\r\n                    console.log(row);\r\n                    let insertRow: string =\r\n                        `insert into SolidworksLicUse values ('${row.dateTime.toISOString()}','${row.product}','${row.action}','${row.entryPoint}','${row.user}','${row.stringData}',${row.dailyMax}, ${row.lineNumber} )`;\r\n                    // console.log(`Inserting New Row`);\r\n                    response = new sql.Request().query(insertRow);\r\n                } else {\r\n                    console.log(`Exists already`);\r\n                    response = Promise.resolve([] as mssql.recordSet);\r\n                }\r\n                return response;\r\n            }).catch(catcher)\r\n            .then((recordset: mssql.recordSet) => {\r\n                return nextRow(logData);\r\n            })\r\n            .catch(catcher)\r\n    } else {\r\n        console.log(`No Date String`)\r\n        rowResponse = nextRow(logData);\r\n    }\r\n    return rowResponse;\r\n    function setMax(num: number): number {\r\n        let max: number = num + maxModifyer;\r\n        if (max < 0) {\r\n            max = 0;\r\n        }\r\n        return max;\r\n    }\r\n}\r\nexport function catcher(err: any) {\r\n    processing = false;\r\n    console.error(`Error was Caught. processing:${processing}`);\r\n    if (err.code == \"ECONNCLOSED\") {\r\n        setTimeout(() => {\r\n            console.log('Done waiting');\r\n        }, 3000)\r\n    } else {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction checkFileExists(logData: LogData): Promise.IThenable<LogData> {\r\n    console.log(`Check File Exists`)\r\n    return new Promise<LogData>((resolve, reject) => {\r\n        fs.stat(logData.getPath(), (err: NodeJS.ErrnoException, stats: fs.Stats): void => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            // console.log(`Processing Log File`);\r\n            resolve(logData)\r\n        });\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx","module.exports = require(\"promise\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"promise\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 3\n// module chunks = 0","\r\nexport class Entry {\r\n    stringData: string\r\n    dateTime: Date\r\n    product: string\r\n    action: string\r\n    lineNumber: number\r\n    constructor(lineParams: LineParams) {\r\n        this.stringData = lineParams.linedata.join(' ');\r\n        this.action = lineParams.linedata[2].slice(0, -1);\r\n        this.dateTime = this.createDateTime(lineParams.dateString, lineParams.linedata[0]);\r\n        this.product = lineParams.linedata[1].slice(1, -1);\r\n        this.lineNumber = lineParams.line;\r\n        // console.log(`Created Entry`);\r\n    }\r\n    createDateTime(dateString: string, timeString: string): Date {\r\n        let d = new Date(`${dateString} ${timeString}`);\r\n        d.setHours(d.getHours() - 8);\r\n        return d;\r\n    }\r\n}\r\nexport class TimestampLine extends Entry {\r\n    dateString: string;\r\n    constructor(lineParams: LineParams) {\r\n        super(lineParams);\r\n        this.dateString = lineParams.linedata[3];\r\n        // console.log(`Created Timestamp`);\r\n    }\r\n}\r\nexport class LoginLine extends Entry {\r\n    entryPoint: string\r\n    user: string\r\n    dailyMax: number;\r\n    constructor(lineParams: LineParams) {\r\n        super(lineParams);\r\n        this.entryPoint = lineParams.linedata[3].slice(1, -1);\r\n        this.user = lineParams.linedata[4];\r\n        this.dailyMax = 0;\r\n        // console.log(`Created LogLine`);\r\n    }\r\n}\r\nexport interface LineParams {\r\n    linedata: string[]\r\n    dateString: string\r\n    line: number\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Entry.tsx","import fs = require('fs');\r\nimport Promise = require('promise');\r\nimport { Entry } from './Entry';\r\n\r\nexport class LogData {\r\n    private log: string[];\r\n    private line: number;\r\n    private lineData: string[];\r\n    private dateString: string;\r\n    private path: string;\r\n    private lineEntry: Entry;\r\n    constructor(path: string, logdata?: string[], currentLine?: number, dateString?: string) {\r\n        this.path = path;\r\n        this.setLogData(logdata || null);\r\n        this.setLine(currentLine || 0);\r\n        if (dateString) {\r\n            this.dateString = dateString;\r\n        }\r\n    }\r\n    incramentLine() {\r\n        this.line += 1;\r\n    }\r\n    getLine() {\r\n        return this.line;\r\n    }\r\n    setLine(value: number) {\r\n        this.line = value;\r\n    }\r\n    setLineData() {\r\n        this.lineData = this.log[this.line].trim().split(` `);\r\n    }\r\n    setLogData(logData: string[]) {\r\n        // console.log('Data updated');\r\n        this.log = logData;\r\n    }\r\n    getLineType() {\r\n        return this.lineData[2];\r\n    }\r\n    setLineEntry(entry: Entry) {\r\n        // console.log(`Line Added`)\r\n        this.lineEntry = entry;\r\n    }\r\n    getLineEntry(): Entry {\r\n        return this.lineEntry;\r\n    }\r\n    getLineParams() {\r\n        let adjustedLine = this.line + 1;\r\n        return {\r\n            linedata: this.lineData,\r\n            dateString: this.dateString,\r\n            line: adjustedLine\r\n        }\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getLogLength() {\r\n        return this.log.length;\r\n    }\r\n    setDateString(date: string) {\r\n        this.dateString = date;\r\n    }\r\n    getDateString() {\r\n        return this.dateString;\r\n    }\r\n    isLastLine() {\r\n        return !(this.getLine() < this.getLogLength());\r\n    }\r\n    getLineCount() {\r\n        return this.log.length;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/LogData.tsx","module.exports = require(\"mssql\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mssql\"\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}